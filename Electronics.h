#ifndef  _ELECTRONICS_H
#define _ELECTRONICS_H
using namespace std;
#include<vector>
#include<string>
#define DC_circuit 0x6C058E04
#define AC_circuit 0xC8684A69
#define AC_circuit_single_phase 0x42EA42DC
#define AC_cicuit_3_phase 0x5671E6E5
#define line_to_line 0xF855055B
#define RMS_Const 0.707
#define R_t 0xE9864CD9
#define I_1 0x4478917C
#define Pi 3.14
#define electron_charge   -1.602*pow(10,-19)
#define prodton_charge  1.602*pow(10,-19)
#define coulomb_constant  8.988*pow(10, 9)
#define line_to_zero 0x0004

/*
Electrical Voltage

Electrical voltage is defined as electric potential difference between two points of an electric field.

Using water pipe analogy, we can visualize the voltage as height difference that makes the water flow down.

V = φ1 - φ2

V is the voltage between point 2 and 1 in volts (V).

φ2 is the electric potential at point #2 in volts (V).

φ1 is the electric potential at point #1 in volts (V).

*/
float E_Voltage_v1(float φ2, float φ1);
/*
In an electrical circuit, the electrical voltage V in volts (V) is equal to the energy consumption E in joules (J)

divided by the electric charge Q in coulombs (C).

V=E/Q

V is the voltage measured in volts (V)

E is the energy measured in joules (J)

Q is the electric charge measured in coulombs (C)

*/
float E_Voltage_v2(float E, float Q);
/*

Voltage in series
The total voltage of several voltage sources or voltage drops in series is their sum.

VT = V1 + V2 + V3 +...

VT - the equivalent voltage source or voltage drop in volts (V).

V1 - voltage source or voltage drop in volts (V).

V2 - voltage source or voltage drop in volts (V).

V3 - voltage source or voltage drop in volts (V).

*/
float Voltage_Series(vector<float> v_series);

/*
Voltage divider
For electrical circuit with resistors (or other impedance) in series, the voltage drop Vi on resistor Ri
Voltage divider rule for DC circuit
For a DC circuit with constant voltage source VT and resistors in series, the voltage drop Vi in resistor Ri is given by the formula:


Vi=VT x RI/R1+R2+R3....


Vi - voltage drop in resistor Ri in volts [V].

VT - the equivalent voltage source or voltage drop in volts [V].

Ri - resistance of resistor Ri in ohms [Ω].

R1 - resistance of resistor R1 in ohms [Ω].

R2 - resistance of resistor R2 in ohms [Ω].

R3 - resistance of resistor R3 in ohms [Ω].


Voltage divider for AC circuit
For an AC circuit with voltage source VT and loads in series, the voltage drop Vi in load Zi is given by the formula:

Vi=VT x ZI/Z1+Z2+Z3....

Vi - voltage drop in load Zi in volts [V].

VT - the equivalent voltage source or voltage drop in volts [V].

Zi - impedance of load Zi in ohms [Ω].

Z1 - impedance of load Z1 in ohms [Ω].

Z2 - impedance of load Z2 in ohms [Ω].

Z3 - impedance of load Z3 in ohms [Ω].
*/
float Voltage_Div(float vt, float Ri, vector<float>R);

/*
DC circuit
Direct current (DC) is generated by a constant voltage source like a battery or DC voltage source.

The voltage drop on a resistor can be calculated from the resistor's resistance and the resistor's current, using Ohm's law:

Voltage calculation with Ohm's law
VR = IR × R

VR - voltage drop on the resistor measured in volts (V)

IR - current flow through the resistor measured in amperes (A)

R - resistance of the resistor measured in ohms (Ω)

AC circuit
Alternating current is generated by a sinusoidal voltage source.

Ohm's law
VZ = IZ × Z

VZ - voltage drop on the load measured in volts (V)

IZ - current flow through the load measured in amperes (A)

Z - impedance of the load measured in ohms (Ω)

*/
float Voltage_ohm(float i, float r, float Iz, float Z, int circuit);

/*
Momentary voltage
v(t) = Vmax × sin(ωt+θ)

v(t) - voltage at time t, measured in volts (V).

Vmax - maximal voltage (=amplitude of sine), measured in volts (V).

ω      - angular frequency measured in radians per second (rad/s).

t        - time, measured in seconds (s).

θ       - phase of sine wave in radians (rad).

*/
float momentry_Voltage(float MaximalVoltage, float w, float θ, float t);
/*
RMS (effective) voltage
Vrms = Veff  =  Vmax / √2 ≈ 0.707 Vmax

Vrms -  RMS voltage, measured in volts (V).

Vmax - maximal voltage (=amplitude of sine), measured in volts (V).
*/
float RMS_Voltage(float Vmax);
/*
Peak-to-peak voltage
Vp-p = 2Vmax
*/
float VoltageP_P(float Vmax);
/*
I = ΔQ / Δt

I is the current in amps (A).

ΔQ is the electric charge in coulombs (C), that flows at time duration of Δt.

Δt is the time duration in seconds (s).
*/
float Electric_Current(float q, float t);
/*
The current IR in anps (A) is equal to the resistor's voltage VR in volts (V) divided by the resistance R in ohms (Ω).
*/
float Electric_current_Ohm(float v, float R);
/*
Current in parallel circuits
Current that flows through loads in parallel - just like water flow through parallel pipes.

The total current ITotal is the sum of the parallel currents of each load:

ITotal = I1 + I2 + I3 +...

ITotal - the equivalent current in amps (A).

I1 - current of load #1 in amps (A).
I2 - current of load #2 in amps (A).
I3 - current of load #3 in amps (A).
*/
float Current_parallel(vector <float> c_parallel);
/*
The current division of resistors in parallel is

RT = 1 / (1/R2 + 1/R3)

or

I1 = IT × RT / (R1+RT)

*/
float current_div(float R1, float R2, float R3, float It, float Rt, int type);
/*
Alternating Current (AC)
Alternating current is generated by a sinusoidal voltage source.

Ohm's law
IZ = VZ / Z

IZ  - current flow through the load measured in amperes (A)

VZ - voltage drop on the load measured in volts (V)

Z  - impedance of the load measured in ohms (Ω)
*/
float Alterent_Current(float Vz, float Z);
/*
Angular frequency
ω = 2π f

ω - angular velocity measured in radians per second (rad/s)

f  - frequency measured in hertz (Hz).

Momentary current
*/
float  Angular_Frequancy(float frequancy);
/*
Momentary current
i(t) = Ipeak sin(ωt+θ)

i(t)      - momentary current at time t, measured in amps (A).

Ipeak - maximal current (=amplitude of sine), measured in amps (A).

ω      - angular frequency measured in radians per second (rad/s).

t        - time, measured in seconds (s).

θ       - phase of sine wave in radians (rad).
*/
float Mumentary_currant(float Ipeak, float w, float temp, float θ);
/*
RMS (effective) current
Irms =  Ieff =  Ipeak / √2 ≈ 0.707 Ipeak
*/
float RMS_current(float Ipeak);
/*
Peak-to-peak current
Ip-p = 2Ipeak
*/
float Ip_p(float Ipeak);
/*
The resistance of a conductor is resistivity of the conductor's material times the conductor's length divided by the conductor's cross sectional area.

R=ρ*l/a

R is the resistance in ohms (Ω).

ρ is the resistivity in ohms-meter (Ω×m)

l is the length of the conductor in meter (m)

A is the cross sectional area of the conductor in square meters (m2)
*/
float Resistance(float ρ, float l, float a);
/*
Resistance calculation with ohm's law

R=V/I
R is the resistance of the resistor in ohms (Ω).

V is the voltage drop on the resistor in volts (V).

I is the current of the resistor in amperes (A).
*/
float Resistance_Ohm(float v, float i);
/*
Temperature effects of resistance
The resistance of a resistor increases when temperature of the resistor increases.
R2 = R1 × ( 1 + α(T2 - T1) )
R2 is the resistance at temperature T2 in ohms (Ω).
R1 is the resistance at temperature T1 in ohms (Ω).
α is the temperature coefficient.
*/
float Temperature_eff(float r1, float α, float T1, float T2);
/*
Resistance of resistors in series
The total equivalent resistance of resistors in series is the sum of the resistance values:
RTotal = R1+ R2+ R3+..
*/
float Resistance_series(vector<float>r_series);
/*
Resistance of resistors in parallel
The total equivalent resistance of resistors in parallel is given by:
1/Rtotal=1/R1+1/R2+1/R3.........
*/
float Resistance_parallel(vector<float>r_series) ;
/*
Electric power definition
The electric power P is equal to the energy consumption E divided by the consumption time t:

P=E/T

P is the electric power in watt (W).
E is the energy consumption in joule (J).
t is the time in seconds (s).
Electric power calculation
P = V ⋅ I

or

P = I² ⋅ R

or

P = V² / R

P is the electric power in watt (W).
V is the voltage in volts (V).
I is the current in amps (A).
R is the resistance in ohms (Ω).

The formulas are for single phase AC power.

For 3 phase AC power:

 When line to line voltage (VL-L) is used in the formula, multiply the single phase power by square root of 3 (√3=1.73).

When line to zero voltage (VL-0) is used in the formula, multiply the single phase power by 3.

put the the value as string with its unit : power("12vol","143sec")

types of unit ("jou", "sec", "vol", "amp", "ohm")

If you are working with a DC circuit let the angle be NULL
You can put NULL when you are not using any parameter*/
float power(string i, string r, float angle, int circuit, int type);
/*

/*
Real power
Real or true power is the power that is used to do the work on the load.

P = Vrms X Irms X cos φ

P is the real power in watts [W]

Vrms is the rms voltage = Vpeak/√2 in Volts [V]

Irms is the rms current = Ipeak/√2 in Amperes [A]

φ  is the impedance phase angle = phase difference between voltage and current.
*/
float Power_Real(float Vrms, float Irms, float φ);
/*
Reactive power
Reactive power is the power that is wasted and not used to do work on the load.

Q = Vrms X Irms X sin φ

Q is the reactive power in volt-ampere-reactive [VAR]
Vrms  is the rms voltage = Vpeak/√2 in Volts [V]
Irms   is the rms current = Ipeak/√2 in Amperes [A]
φ      is the impedance phase angle = phase difference between voltage and current.

*/
float Reactive_power(float Vrms, float Irms, float φ);
/*
Apparent power
The apparent power is the power that is supplied to the circuit.

S = Vrms Irms



S      is the apparent power in Volt-amper [VA]

Vrms  is the rms voltage = Vpeak/√2 in Volts [V]

Irms   is the rms current = Ipeak/√2 in Amperes [A]

*/
float Apperent_power(float vrms, float Irms);
/*
Real / reactive / apparent powers relation
The real power P and reactive power Q give together the apparent power S:
P² + Q² = S²
P      is the real power in watts [W]
Q      is the reactive power in volt-ampere-reactive [VAR]
S      is the apparent power in Volt-amper [VA]
note :
   W=wat
   va=vam
*/

float relation_real_reactive_apperant(string i, string r);
/*
Coulomb's law formula
Coulomb's law calculates the electric force F in newtons (N) between two electric charges q1 and q2 in coulombs (C)

with a distance of r in meters (m):



F=k.q1.q2/R²

F is the force on q1 and q2 measured in newtons (N).

k is Coulomb's constant k = 8.988×109 N⋅m2/C2

q1 is the first charge in coulombs (C).

q2 is the second charge in coulombs (C).

r is the distance between the 2 charges in meters (m).
*/
float coulomb_law(float q1, float q2, float r);

/*
Electric Power Efficiency
Power efficiency
Power efficiency is defined as the ratio of the output power divided by the input power:

η = 100% ⋅ Pout / Pin

η is the efficiency in percent (%).

Pin is the input power consumption in watts (W).

Pout is the output power or actual work in watts (W).

Example
Electric motor has input power consumption of 50 watts.

The motor was activated for 60 seconds and produced work of 2970 joules.

Find the efficiency of the motor.

Energy efficiency
Energy efficiency is defined as the ratio of the output energy divided by the input energy:

η = 100% ⋅ Eout / Ein

η is the efficiency in percent (%).

Ein is the input energy consumed in joule (J).

Eout is the output energy or actual work in joule (J).
*/
float efficiency(float in, float out);
/*
Power factor definition
The power factor is equal to the real or true power P in watts (W) divided by the apparent power |S| in volt-ampere (VA):

PF = P(W) / |S(VA)|
PF - power factor.
P   - real power in watts (W).
|S|   - apparent power - the magnitude of the complex power in volt⋅amps (VA).
*/

float Power_factor(float power_real, float apperant_power);

namespace units_conv {

    // Voltage conversions
    double VoltsToMillivolts(double volts);
    double VoltsToKilovolts(double volts);
    double VoltsToMicrovolts(double volts);
    double MillivoltsToVolts(double millivolts);
    double KilovoltsToVolts(double kilovolts);
    double MicrovoltsToVolts(double microvolts);

    // Current conversions
    double AmperesToMilliamperes(double amperes);
    double AmperesToKiloamperes(double amperes);
    double AmperesToMicroamperes(double amperes);
    double MilliamperesToAmperes(double milliamperes);
    double KiloamperesToAmperes(double kiloamperes);
    double MicroamperesToAmperes(double microamperes);

    // Resistance conversions
    double OhmsToKiloohms(double ohms);
    double OhmsToMegaohms(double ohms);
    double OhmsToMilliohms(double ohms);
    double KiloohmsToOhms(double kiloohms);
    double MegaohmsToOhms(double megaohms);
    double MilliohmsToOhms(double milliohms);

    // Power conversions
    double WattsToMilliwatts(double watts);
    double WattsToKilowatts(double watts);
    double WattsToMicrowatts(double watts);
    double MilliwattsToWatts(double milliwatts);
    double KilowattsToWatts(double kilowatts);
    double MicrowattsToWatts(double microwatts);

    // Capacitance conversions
    double FaradsToMicrofarads(double farads);
    double FaradsToNanofarads(double farads);
    double FaradsToPicofarads(double farads);
    double MicrofaradsToFarads(double microfarads);
    double NanofaradsToFarads(double nanofarads);
    double PicofaradsToFarads(double picofarads);

    // Inductance conversions
    double HenriesToMillihenries(double henries);
    double HenriesToMicrohenries(double henries);
    double MillihenriesToHenries(double millihenries);
    double MicrohenriesToHenries(double microhenries);

    // Conductance conversions
    double SiemensToMillisiemens(double siemens);
    double MillisiemensToSiemens(double millisiemens);
    // Energy conversions
    double KilowattHoursToWattHours(double kWh);
    double WattHoursToKilowattHours(double Wh);
    double KilowattHoursToJoules(double kWh);
    double JoulesToKilowattHours(double joules);
    double WattHoursToJoules(double Wh);
    double JoulesToWattHours(double joules);
    double JoulesToCalories(double joules);
    double CaloriesToJoules(double calories);
    double JoulesToKilocalories(double joules);
    double KilocaloriesToJoules(double kilocalories);
    double JoulesToElectronvolts(double joules);
    double ElectronvoltsToJoules(double electronvolts);
}
namespace elctronics_components {
    namespace Capacitor {
        // Function to calculate capacitance (C = Q / V)
        double CalculateCapacitance(double charge, double voltage);


        // Function to calculate charge (Q = C * V)
        double CalculateCharge(double capacitance, double voltage);
        // Function to calculate voltage (V = Q / C)
        double CalculateVoltage(double charge, double capacitance);

        // Function to calculate energy stored in the capacitor (E = 0.5 * C * V^2)
        double CalculateEnergy(double capacitance, double voltage);


        // Function to calculate equivalent capacitance in series (1/C_eq = 1/C1 + 1/C2 + ...)
        double CalculateSeriesCapacitance(const std::vector<double>& capacitances);
        // Function to calculate equivalent capacitance in parallel (C_eq = C1 + C2 + ...)
        double CalculateParallelCapacitance(const std::vector<double>& capacitances);
    }
    namespace indactor {
        // Function to calculate inductance (L = V * t / I)
        double CalculateInductance(double voltage, double time, double current);


        // Function to calculate voltage across the inductor (V = L * dI/dt)
        double CalculateInductorVoltage(double inductance, double currentChangeRate);


        // Function to calculate current through the inductor (I = V * t / L)
        double CalculateInductorCurrent(double voltage, double time, double inductance);

        // Function to calculate energy stored in the inductor (E = 0.5 * L * I^2)
        double CalculateInductorEnergy(double inductance, double current);
        // Function to calculate equivalent inductance in series (L_eq = L1 + L2 + ...)
        double CalculateSeriesInductance(const std::vector<double>& inductances);
        // Function to calculate equivalent inductance in parallel (1/L_eq = 1/L1 + 1/L2 + ...)
        double CalculateParallelInductance(const std::vector<double>& inductances);
    }
    namespace Risistor {
        // Function to calculate resistance of a 4-band resistor
        double Calculate4BandResistor(int digit1, int digit2, double multiplier);


        // Function to calculate resistance of a 5-band or 6-band resistor
        double Calculate5Or6BandResistor(int digit1, int digit2, int digit3, double multiplier);



    }
}



#endif


